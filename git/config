[init]
    defaultBranch = main
[user]
    name = Kirill Osintsev
    email = kosintsev.dev@gmail.com
    signingKey = ~/.ssh/id_ed25519
[alias]
    c = clone --recursive
    p = push
    a = add
    st = status
    sw = switch
    br = branch
    brs = branch -a
    del = branch -D
    rn = branch -m
    amend = commit --amend
    cmt = commit
    stashes = stash list
    l = log --graph --date=short --branches --pretty=format:'%C(yellow)%h%C(reset) %ad | %C(75)%s%C(reset) %C(yellow)%d%C(reset) [%an]'
    co = "!echo 'Stop using git checkout! Use either switch or branch command' && false"
    checkout = "!echo 'Stop using git checkout! Use either switch or branch command' && false"
    authors = shortlog -sn
    noff = merge --no-ff
    precommit-overview = "!f() { while true; do file=$(git diff --cached --name-only | fzf --height=20% --reverse --prompt='Staged file: '); [ -z \"$file\" ] && break; git diff --cached --color --diff-algorithm=minimal --unified=5 -W --patch-with-stat -- \"$file\" | less -R; done }; f"
    precommit-stat = diff --cached --compact-summary
    plr = pull --rebase --autostash
    wip = !git add -A && git commit -m "WIP" --no-verify
    unstage = restore --staged .
    undo = reset --soft HEAD^
    forget = !git stash && git stash drop
    delete-tag="!f() { git push --delete ${2-origin} ${1}; git tag -d ${1}; }; f"
    please = push --force-with-lease
    # publish current branch
    publish = "!f() { git push -u ${1:-origin} $(git rev-parse --abbrev-ref HEAD); }; f"
    # Nukes a branch locally and on the origin remote.
    nuke = "!f() { git branch -D $1 && git push origin :$1; }; f"
    # Remove local branches that have been removed upstream
    cleanup = "!git fetch --all -p && git branch -vv | grep \": gone]\" | awk '{ print $1 }' | xargs -n 1 git branch -D"
    delete-all-branches = "git branch | grep -v 'main' | xargs git branch -D"
    nevermind = !git reset --hard HEAD && git clean -d -f
    discard = checkout --
    uncommit = reset --mixed HEAD~
    # Set up your branch to track a remote branch. Assumes you mean `origin/$branch-name`.
    track = "!f() { branch=$(git rev-parse --abbrev-ref HEAD); git branch $branch --set-upstream-to origin/$branch }; f"
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = true
    ui = true
    pager = true
[color "branch"]
    current = yellow reverse
    local   = yellow
    remote  = green
[color "status"]
    added = green
    changed = yellow
    untracked = red
[core]
    editor = vim
    pager = less
    autocrlf = input
    hooksPath = /dev/null
[diff]
    algorithm = histogram
    colorMoved = true
    indentHeuristic = true
[pull]
    rebase = true
[push]
    default = upstream
    autoSetupRemote = true
    followtags = true
[rebase]
    autoStash           = true
    autosquash          = true
    abbreviateCommands  = true
    updateRefs          = true
[tag]
    sort = version:refname
    gpgSign = true
[pager]
    status = true
    diff = true
    commit = false
    log = true
    cl = false
    blame = false
    merge = false
    rebase = false
    help = false
    show = true
    reflog = false
    grep = false
[advice]
    statusHints = false
[commit]
    gpgSign = true
    verbose = false
[gpg]
    format = ssh
